The following core rules are included by reference, as defined in
[RFC5234], Appendix B.1: ALPHA (letters), CR (carriage return), CRLF
(CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double quote),
HEXDIG (hexadecimal 0-9/A-F/a-f), HTAB (horizontal tab), LF (line
feed), OCTET (any 8-bit sequence of data), SP (space), and VCHAR (any
visible [USASCII] character).

As a convention, ABNF rule names prefixed with "obs-" denote
"obsolete" grammar rules that appear for historical reasons.

_______________________________________________________________
____________________________ 7230 _____________________________

2.6.  Protocol Versioning
	- PAGE 13 : clarifie comment il doit etre ecrit
	- PAGE 14 : erreur 505 explique si mauvais Protocol

2.7.  Uniform Resource Identifiers (URI)
	- PAGE 16 : bref explication sur comment est un uri

2.7.1.  http URI Scheme
	- PAGE 17 : bref explication sur comment est un uri

2.7.3.  http and https URI Normalization and Comparison
	- PAGE 18 : explication sur les URI qui se ressemble (avec hexa par ex)

3.  Message Format
	- PAGE 19 : decrit la structure d'un Message

3.1.  Start Line
	- PAGE 20,21 : decrit la structure de la start line (request line / status line)

3.2.  Header Fields
	- PAGE 22-26 : decrit la structure d'un Header

3.3.  Message Body
	- PAGE 27 : quelques regles sur le Body

3.3.1.  Transfer-Encoding [HEADER]
	- PAGE 27-28 : requete >> explique les body chunk
					reponse >> comment le server doit parfois inclure ce header ou non
	- PAGE 35-36 : plus d'info sur comment sont fait les chunks

3.3.2.  Content-Length [HEADER]
	- PAGE 29-30 : requete >> explique quand celui-ci doit etre present ou non, 
					son role et quand renvoyer une erreur
					reponse >> indique les cas ou le srveur doit inclure ou non celui-ci
	- PAGE 35-36 : informations additionnelles sur les erreurs que peut generer le server vis-a-vis
					ce header et la taille du body

3.4.  Handling Incomplete Messages
	- PAGE 33 : cas des erreurs dans le cas ou la requete est Incomplete

3.5.  Message Parsing Robustness
	- PAGE 34 : serveur doit renvoyer erreur 400 si parsing requete faux

5.3.  Request Target
	- PAGE 41 : 5.3.1 et 5.3.2 les 2 types de requetes que peut recevoir le server

5.4.  Host
	- PAGE 43 : requete >> les infos de ce header et les erreurs que le server doit genere. 
							Permet de choisir entre plusieurs blocs serveurs differents.

5.5.  Effective Request URI
	- PAGE 44 : explique comment reconstruire l'URI qui va etre utilisÃ© pour la recherche
				>> URI + config file + header Host

7.  ABNF List Extension: #rule
	- PAGE 58-59 : explique le format attendu pour la liste d'elements qui peuvent etre present dans les headers


_______________________________________________________________
____________________________ 7231 _____________________________

3.1.1.1.  Media Type:
	- PAGE 7 : clarifie le format du content-type header

3.1.1.4.  Multipart Types
	- PAGE 9 : a voir si on l'implemente ou pas. a creuser

3.1.1.5.  Content-Type [HEADER]
	- PAGE 10 : >> requete pas tres utile visiblement
				>> reponse a config vite fait en fonction de l'extension du fichier

3.1.3.2.  Content-Language [HEADER]
	- PAGE 12 : 3.1.3.1.  Language Tags permet d'avoir le format du header
	- PAGE 13 : >> requete header pas tres utile
				>> reponse a config vite fait en focntion de l'extension du fichier

3.1.4.2.  Content-Location [HEADER]
	- PAGE 14 : a l'air d'etre principalement present dans la reponse
